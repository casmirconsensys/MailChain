class ProtocolIsEmptyError extends Error {
    constructor() {
        super('protocol is empty');
    }
}
class AddressIsEmptyError extends Error {
    constructor() {
        super('address is empty');
    }
}
class MessagingKeyVerificationError extends Error {
    constructor() {
        super('Messaging key validation failed and is not useable for this address.');
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'messaging_key_validation_failed'
        });
    }
}
class AddressMustBeProtocolAddressError extends Error {
    constructor() {
        super('address must be a protocol address');
    }
}
class PublicKeyNotFoundError extends Error {
    constructor() {
        super('mailchain public key not found');
    }
}

export { AddressIsEmptyError, AddressMustBeProtocolAddressError, MessagingKeyVerificationError, ProtocolIsEmptyError, PublicKeyNotFoundError };
