import { idFromPublicKey, publicKeyFromId, idFromPrivateKey, privateKeyFromId } from './ids.js';

function encodePublicKey(key) {
    const out = new Uint8Array(key.bytes.length + 1);
    out[0] = idFromPublicKey(key);
    out.set(key.bytes, 1);
    return out;
}
function decodePublicKey(encoded) {
    if (encoded.length < 32 + 1) {
        throw Error('encoded public key is too short');
    }
    return publicKeyFromId(encoded[0], encoded.slice(1));
}
function encodePrivateKey(key) {
    const out = new Uint8Array(key.bytes.length + 1);
    out[0] = idFromPrivateKey(key);
    out.set(key.bytes, 1);
    return out;
}
function decodePrivateKey(encoded) {
    if (encoded.length < 32 + 1) {
        throw Error('encoded private key is too short');
    }
    return privateKeyFromId(encoded[0], encoded.slice(1));
}

export { decodePrivateKey, decodePublicKey, encodePrivateKey, encodePublicKey };
