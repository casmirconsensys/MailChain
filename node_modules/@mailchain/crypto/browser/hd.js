import { isNumber, isBn, isBigInt, bnToU8a, isHex, hexToU8a, isString, compactAddLength, stringToU8a } from '@polkadot/util';
import { BN_LE_256_OPTS } from '@polkadot/util-crypto/bn';
import { blake2AsU8a } from '@polkadot/util-crypto';

const CHAIN_CODE_LEN = 32;
function chainCodeFromDeriveIndex(value) {
    if (isNumber(value) || isBn(value) || isBigInt(value)) {
        return chainCodeFromDeriveIndex(bnToU8a(value, BN_LE_256_OPTS));
    }
    else if (isHex(value)) {
        return chainCodeFromDeriveIndex(hexToU8a(value));
    }
    else if (isString(value)) {
        return chainCodeFromDeriveIndex(compactAddLength(stringToU8a(value)));
    }
    else if (value.length > CHAIN_CODE_LEN) {
        return chainCodeFromDeriveIndex(blake2AsU8a(value));
    }
    const chainCode = new Uint8Array(32);
    chainCode.fill(0);
    chainCode.set(value, 0);
    return chainCode;
}

export { chainCodeFromDeriveIndex };
