'use strict';

var util = require('@polkadot/util');
var bn = require('@polkadot/util-crypto/bn');
var utilCrypto = require('@polkadot/util-crypto');

const CHAIN_CODE_LEN = 32;
function chainCodeFromDeriveIndex(value) {
    if (util.isNumber(value) || util.isBn(value) || util.isBigInt(value)) {
        return chainCodeFromDeriveIndex(util.bnToU8a(value, bn.BN_LE_256_OPTS));
    }
    else if (util.isHex(value)) {
        return chainCodeFromDeriveIndex(util.hexToU8a(value));
    }
    else if (util.isString(value)) {
        return chainCodeFromDeriveIndex(util.compactAddLength(util.stringToU8a(value)));
    }
    else if (value.length > CHAIN_CODE_LEN) {
        return chainCodeFromDeriveIndex(utilCrypto.blake2AsU8a(value));
    }
    const chainCode = new Uint8Array(32);
    chainCode.fill(0);
    chainCode.set(value, 0);
    return chainCode;
}

exports.chainCodeFromDeriveIndex = chainCodeFromDeriveIndex;
