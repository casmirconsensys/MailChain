'use strict';

var utilCrypto = require('@polkadot/util-crypto');
var tweetnacl = require('tweetnacl');
var rand = require('../../rand.js');
var _private = require('../../ed25519/private.js');

class ED25519KeyExchange {
    constructor(randomFunc = rand.secureRandom) {
        Object.defineProperty(this, "randomFunc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.randomFunc = randomFunc;
    }
    async EphemeralKey() {
        return _private.ED25519PrivateKey.generate(this.randomFunc);
    }
    async SharedSecret(privateKey, publicKey) {
        if (privateKey.publicKey.bytes.toString() === publicKey.bytes.toString()) {
            throw new Error('public key can not be from private key');
        }
        const publicKeyBytes = ED25519KeyExchange.publicKeyToCurve25519(publicKey);
        const privateKeyBytes = ED25519KeyExchange.privateKeyToCurve25519(_private.asED25519PrivateKey(privateKey));
        return tweetnacl.scalarMult(privateKeyBytes, publicKeyBytes);
    }
    static privateKeyToCurve25519(privateKey) {
        return utilCrypto.convertSecretKeyToCurve25519(privateKey.bytes);
    }
    static publicKeyToCurve25519(publicKey) {
        return utilCrypto.convertPublicKeyToCurve25519(publicKey.bytes);
    }
}

exports.ED25519KeyExchange = ED25519KeyExchange;
