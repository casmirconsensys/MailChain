'use strict';

var utilCrypto = require('@polkadot/util-crypto');
var rand = require('../../rand.js');
var _private = require('../../sr25519/private.js');

class SR25519KeyExchange {
    constructor(randomFunc = rand.secureRandom) {
        Object.defineProperty(this, "randomFunc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.randomFunc = randomFunc;
    }
    async EphemeralKey() {
        return _private.SR25519PrivateKey.generate(this.randomFunc);
    }
    async SharedSecret(privateKey, publicKey) {
        const ready = await utilCrypto.cryptoWaitReady(); // needed before calling sr25519Sign
        if (!ready) {
            throw new Error('crypto libraries could not be initialized');
        }
        if (privateKey.publicKey.bytes.toString() === publicKey.bytes.toString()) {
            throw new Error('public key can not be from private key');
        }
        return utilCrypto.sr25519Agreement(_private.asSR25519PrivateKey(privateKey).keyPair.secretKey, publicKey.bytes);
    }
}

exports.SR25519KeyExchange = SR25519KeyExchange;
