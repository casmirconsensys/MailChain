'use strict';

var elliptic = require('elliptic');
var rand = require('../../rand.js');
var _private = require('../../secp256k1/private.js');

class SECP256K1KeyExchange {
    constructor(randomFunc = rand.secureRandom) {
        Object.defineProperty(this, "randomFunc", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ec", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.randomFunc = randomFunc;
        this.ec = new elliptic.ec('secp256k1');
    }
    async EphemeralKey() {
        return _private.SECP256K1PrivateKey.generate(this.randomFunc);
    }
    async SharedSecret(privateKey, publicKey) {
        if (privateKey.publicKey.bytes.toString() === publicKey.bytes.toString()) {
            throw new Error('public key can not be from private key');
        }
        // ephemeral private key
        const prvKey = this.ec.keyFromPrivate(privateKey.bytes);
        // recipient public key
        const pubKey = this.ec.keyFromPublic(publicKey.bytes);
        const bp = pubKey.getPublic().mul(prvKey.getPrivate());
        const buf = bp.getX().toArrayLike(Buffer, 'be', 32);
        return new Uint8Array(buf);
    }
}

exports.SECP256K1KeyExchange = SECP256K1KeyExchange;
