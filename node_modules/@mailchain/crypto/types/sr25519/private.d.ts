import { Keypair } from '@polkadot/util-crypto/types';
import { RandomFunction } from '@mailchain/crypto/types/rand';
import { PrivateKey } from '@mailchain/crypto/types/private';
import { PublicKey } from '@mailchain/crypto/types/public';
export declare const SR25519SecretKeyLength = 64;
export declare const SR25519SerializedPrivateKeyLength: number;
export declare const SR25519SeedLength = 32;
export declare class SR25519PrivateKey implements PrivateKey {
    readonly bytes: Uint8Array;
    readonly publicKey: PublicKey;
    readonly keyPair: Keypair;
    readonly curve: string;
    private constructor();
    static generate(rand?: RandomFunction): Promise<PrivateKey>;
    static fromMnemonicPhrase(mnemonic: string, password?: string): Promise<SR25519PrivateKey>;
    static fromSeed(bytes: Uint8Array): Promise<SR25519PrivateKey>;
    static fromKeyPair(keyPair: {
        publicKey: Uint8Array;
        secretKey: Uint8Array;
    }): SR25519PrivateKey;
    static fromBytes(bytes: Uint8Array): SR25519PrivateKey;
    sign(message: Uint8Array): Promise<Uint8Array>;
}
export declare function asSR25519PrivateKey(key: PrivateKey): SR25519PrivateKey;
