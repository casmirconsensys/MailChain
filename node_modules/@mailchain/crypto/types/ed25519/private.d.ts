import { Keypair } from '@polkadot/util-crypto/types';
import { PrivateKey } from '@mailchain/crypto/types/private';
import { PublicKey } from '@mailchain/crypto/types/public';
import { RandomFunction } from '@mailchain/crypto/types/rand';
export declare const ED25519PrivateKeyLength = 64;
export declare const ED25519SeedLength = 32;
export declare class ED25519PrivateKey implements PrivateKey {
    readonly bytes: Uint8Array;
    readonly publicKey: PublicKey;
    readonly curve: string;
    readonly keyPair: Keypair;
    constructor(keyPair: Keypair);
    static fromSeed(seed: Uint8Array): ED25519PrivateKey;
    static fromSecretKey(secretKey: Uint8Array): ED25519PrivateKey;
    static fromMnemonicPhrase(mnemonic: string, password?: string): ED25519PrivateKey;
    static generate(rand?: RandomFunction): ED25519PrivateKey;
    sign(message: Uint8Array): Promise<Uint8Array>;
}
export declare function asED25519PrivateKey(key: PrivateKey): ED25519PrivateKey;
