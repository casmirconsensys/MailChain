import { SignerWithPublicKey } from '@mailchain/crypto';
import { Configuration, MailchainResult } from '@mailchain/internal';
import { DeliveryRequests, SentManyDeliveryRequests, SentDeliveryRequest, SomeDeliveryRequestsFailedError, SendManyDeliveryRequestsParams } from '@mailchain/internal/types/sending/deliveryRequests/deliveryRequests';
import { ResolvedAddress } from '@mailchain/internal/messagingKeys';
import { PreparedDistribution } from '@mailchain/internal/types/sending/mail/payloadSender';
export type SentMailDeliveryRequests = SentDeliveryRequest[];
export type SendMailDeliveryRequestsError = SomeMailDeliveryRequestsFailedError;
export declare class SomeMailDeliveryRequestsFailedError extends Error {
    readonly successes: Array<{
        params: SendManyDeliveryRequestsParams;
        data: SentManyDeliveryRequests;
    }>;
    readonly failures: Array<{
        params: SendManyDeliveryRequestsParams;
        error: SomeDeliveryRequestsFailedError;
    }>;
    readonly type = "not_all_mail_delivery_requests_sent";
    constructor(successes: Array<{
        params: SendManyDeliveryRequestsParams;
        data: SentManyDeliveryRequests;
    }>, failures: Array<{
        params: SendManyDeliveryRequestsParams;
        error: SomeDeliveryRequestsFailedError;
    }>);
}
export type SendMailDeliveryRequestsParams = {
    distributions: PreparedDistribution[];
    resolvedAddresses: Map<string, ResolvedAddress>;
};
export declare class MailDeliveryRequests {
    private readonly deliveryRequests;
    constructor(deliveryRequests: DeliveryRequests);
    static create(configuration: Configuration, sender: SignerWithPublicKey): MailDeliveryRequests;
    /**
     * Send the prepared payloads to each recipient.
     * A single payload maybe be sent to multiple recipients in the case of multiple recipients.
     * Separate payloads are sent to each recipient in the case of bcc recipients.
     */
    sendMailDeliveryRequests(params: SendMailDeliveryRequestsParams): Promise<MailchainResult<SentMailDeliveryRequests, SendMailDeliveryRequestsError>>;
}
