import { SignerWithPublicKey } from '@mailchain/crypto';
import { Configuration, MailchainResult } from '@mailchain/internal';
import { ResolvedAddress } from '@mailchain/internal/messagingKeys';
import { MailDistribution } from '@mailchain/internal/types/transport';
import { SentDeliveryRequest } from '@mailchain/internal/types/sending/deliveryRequests';
import { MailPayloadSender, PrepareDistributionsError } from '@mailchain/internal/types/sending/mail/payloadSender';
import { MailDeliveryRequests, SomeMailDeliveryRequestsFailedError } from '@mailchain/internal/types/sending/mail/deliveryRequests';
export type DistributeMailError = PrepareDistributionsError | SomeMailDeliveryRequestsFailedError;
export type DistributeMailParams = {
    distributions: MailDistribution[];
    resolvedAddresses: Map<string, ResolvedAddress>;
};
export type DistributedMail = SentDeliveryRequest[];
export declare class MailDistributor {
    private readonly mailPayloadSender;
    private readonly mailDeliveryRequests;
    constructor(mailPayloadSender: MailPayloadSender, mailDeliveryRequests: MailDeliveryRequests);
    static create(configuration: Configuration, sender: SignerWithPublicKey): MailDistributor;
    distributeMail(params: DistributeMailParams): Promise<MailchainResult<DistributedMail, DistributeMailError>>;
}
