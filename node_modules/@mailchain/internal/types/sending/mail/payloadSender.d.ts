import { SignerWithPublicKey } from '@mailchain/crypto';
import { Configuration, MailchainResult } from '@mailchain/internal';
import { PayloadSender, SentPayload } from '@mailchain/internal/types/sending/payload/send';
import { MailDistribution } from '@mailchain/internal/types/transport/mail/distribution';
export declare class SomePrepareDistributionError extends Error {
    readonly successes: Array<{
        params: PrepareDistributionParams;
        data: PreparedDistribution;
    }>;
    readonly failures: Array<{
        params: PrepareDistributionParams;
        error: PayloadSendingError;
    }>;
    readonly type = "not_all_distribution_prepared";
    constructor(successes: Array<{
        params: PrepareDistributionParams;
        data: PreparedDistribution;
    }>, failures: Array<{
        params: PrepareDistributionParams;
        error: PayloadSendingError;
    }>);
}
export type PrepareDistributionsError = SomePrepareDistributionError;
export declare class PayloadSendingError extends Error {
    readonly distribution: MailDistribution;
    readonly cause: Error;
    readonly type = "payload_sending_error";
    constructor(distribution: MailDistribution, cause: Error);
}
export type PrepareDistributionParams = MailDistribution;
export type PreparedDistribution = {
    distribution: MailDistribution;
    preparedPayload: SentPayload;
};
export type PreparedDistributions = PreparedDistribution[];
export declare class MailPayloadSender {
    private readonly payloadSender;
    constructor(payloadSender: PayloadSender);
    static create(configuration: Configuration, signer: SignerWithPublicKey): MailPayloadSender;
    /**
     * Prepare payloads, update each distribution to the storage layer
     * @param distributions payloads for each recipient
     * @returns
     */
    prepareDistributions(distributions: MailDistribution[]): Promise<MailchainResult<PreparedDistributions, PrepareDistributionsError>>;
    prepareDistribution(distribution: PrepareDistributionParams): Promise<MailchainResult<PreparedDistribution, PayloadSendingError>>;
}
