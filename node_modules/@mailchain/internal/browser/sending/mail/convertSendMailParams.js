import { secureRandom } from '@mailchain/crypto';
import { encodeBase64 } from '@mailchain/encoding';

/**
 * Temporary adapter migration function to convert from SDK mail params to internal params.
 *
 * @deprecated This will be removed in favor of removing the internal params and accepting these params.
 */
function toMailData(params) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const mailDomain = params.from.split('@')[1];
    return {
        id: `${encodeBase64(secureRandom(32))}@${mailDomain}`,
        date: new Date(),
        subject: params.subject,
        from: createMailAddress(params.from),
        replyTo: params.replyTo ? createMailAddress(params.replyTo) : undefined,
        recipients: (_b = (_a = params.to) === null || _a === void 0 ? void 0 : _a.map((to) => createMailAddress(to))) !== null && _b !== void 0 ? _b : [],
        carbonCopyRecipients: (_d = (_c = params.cc) === null || _c === void 0 ? void 0 : _c.map((cc) => createMailAddress(cc))) !== null && _d !== void 0 ? _d : [],
        blindCarbonCopyRecipients: (_f = (_e = params.bcc) === null || _e === void 0 ? void 0 : _e.map((bcc) => createMailAddress(bcc))) !== null && _f !== void 0 ? _f : [],
        message: (_h = (_g = params.content.html) === null || _g === void 0 ? void 0 : _g.toString()) !== null && _h !== void 0 ? _h : '',
        plainTextMessage: (_k = (_j = params.content.text) === null || _j === void 0 ? void 0 : _j.toString()) !== null && _k !== void 0 ? _k : '',
    };
}
/**
 * Temporary adapter migration function to convert from internal MailData to SDK mail params.
 *
 * @deprecated This will be removed in favor of removing the internal params and accepting these params.
 */
function createMailAddress(address) {
    const name = address.split('@')[0];
    return { name, address };
}

export { createMailAddress, toMailData };
