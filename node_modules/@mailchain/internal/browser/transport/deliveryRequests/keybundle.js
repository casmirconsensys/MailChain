import { ED25519KeyExchange, encodePublicKey, secureRandom } from '@mailchain/crypto';
import { protocol } from '../../protobuf/protocol/protocol.js';

/* eslint-disable @typescript-eslint/naming-convention */
async function createECDHKeyBundle(recipientMessagingKey, rand = secureRandom) {
    const keyEx = new ED25519KeyExchange(rand);
    const ephemeralKey = await keyEx.EphemeralKey();
    const sharedSecret = await keyEx.SharedSecret(ephemeralKey, recipientMessagingKey);
    const payload = {
        publicMessagingKey: encodePublicKey(recipientMessagingKey),
        publicEphemeralKey: encodePublicKey(ephemeralKey.publicKey),
    };
    var errMsg = protocol.ECDHKeyBundle.verify(payload);
    if (errMsg) {
        throw Error(errMsg);
    }
    return {
        secret: sharedSecret,
        keyBundle: protocol.ECDHKeyBundle.create(payload),
    };
}

export { createECDHKeyBundle };
