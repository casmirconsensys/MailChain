'use strict';

var addressing = require('@mailchain/addressing');
var crypto = require('@mailchain/crypto');
var axios = require('axios');
var api = require('@mailchain/api');
var encoding = require('@mailchain/encoding');

class IdentityKeys {
    constructor(addressesApi, identityKeyApi) {
        Object.defineProperty(this, "addressesApi", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: addressesApi
        });
        Object.defineProperty(this, "identityKeyApi", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: identityKeyApi
        });
    }
    static create(config) {
        const axiosConfig = api.createAxiosConfiguration(config.apiPath);
        return new IdentityKeys(api.AddressesApiFactory(axiosConfig), api.IdentityKeysApiFactory(axiosConfig));
    }
    async getAddressIdentityKey(address) {
        return this.resolve(addressing.formatAddress(address, 'mail'));
    }
    async resolve(address) {
        return this.addressesApi
            .getAddressIdentityKey(address)
            .then(({ data }) => ({
            identityKey: crypto.decodePublicKey(encoding.decodeHexZeroX(data.identityKey)),
            protocol: data.protocol,
        }))
            .catch((e) => {
            var _a, _b;
            if (axios.isAxiosError(e)) {
                if (((_b = (_a = e.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.message) === 'address not found') {
                    return null;
                }
            }
            throw e;
        });
    }
    async reverse(identityKey) {
        const { addresses } = (await this.identityKeyApi.getIdentityKeyAddresses(encoding.encodeHexZeroX(crypto.encodePublicKey(identityKey)))).data;
        return addresses;
    }
}

exports.IdentityKeys = IdentityKeys;
