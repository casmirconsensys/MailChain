'use strict';

class MessagingKeyContactError extends Error {
    constructor(cause) {
        super(`Failed calling messaging key contract.`);
        Object.defineProperty(this, "cause", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: cause
        });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'messaging_key_contact_error'
        });
    }
}
class UnexpectedMailchainError extends Error {
    constructor(message, cause) {
        super(message, { cause });
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'unexpected_error'
        });
    }
}
class NameserviceAddressNotFoundError extends Error {
    constructor() {
        super(`Name service address is not found. Check address is present on nameservice.`);
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'nameservice_address_not_found'
        });
    }
}
class NameserviceAddressUnresolvableError extends Error {
    constructor() {
        super(`Name service address is unresolvable. Check registry entry in nameservice.`);
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'nameservice_address_unresolvable'
        });
    }
}
class MessagingKeyNotRegisteredError extends Error {
    constructor() {
        super('Messaging key is not registered. Register address and try again.');
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'messaging_key_not_registered'
        });
    }
}

exports.MessagingKeyContactError = MessagingKeyContactError;
exports.MessagingKeyNotRegisteredError = MessagingKeyNotRegisteredError;
exports.NameserviceAddressNotFoundError = NameserviceAddressNotFoundError;
exports.NameserviceAddressUnresolvableError = NameserviceAddressUnresolvableError;
exports.UnexpectedMailchainError = UnexpectedMailchainError;
