'use strict';

var addressing = require('@mailchain/addressing');
var uniqWith = require('lodash/unionWith');

function consolidateMailbox(mailbox) {
    const consolidators = [consolidateMailboxLabel, consolidateMailboxAliases];
    return consolidators.reduce((prev, consolidator) => consolidator(prev), mailbox);
}
function consolidateMailboxLabel(mailbox) {
    var _a;
    return Object.assign(Object.assign({}, mailbox), { label: ((_a = mailbox.label) === null || _a === void 0 ? void 0 : _a.trim()) || null });
}
/**
 * Consolidate the provided mailbox aliases with the following rules:
 * - There can be only single alias per `address`. If there are duplicates, only the first one in the entries is kept, the others are ignored.
 */
function consolidateMailboxAliases(mailbox) {
    return Object.assign(Object.assign({}, mailbox), { aliases: uniqWith(mailbox.aliases, (a, b) => addressing.isSameAddress(a.address, b.address)) });
}

exports.consolidateMailbox = consolidateMailbox;
exports.consolidateMailboxAliases = consolidateMailboxAliases;
exports.consolidateMailboxLabel = consolidateMailboxLabel;
