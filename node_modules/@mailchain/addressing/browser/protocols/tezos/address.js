import { KindSECP256R1, KindED25519, KindSECP256K1 } from '@mailchain/crypto';
import { sha256 } from '@noble/hashes/sha256';
import { blake2AsU8a } from '@polkadot/util-crypto';
import { prefix } from './const.js';

/**
 * Derive the tezos address corresponding to the {@link PublicKey}.
 *
 * @param publicKey must be either a key of {@link KindSECP256K1} or {@link KindED25519} or {@link KindSECP256R1}.
 * @throw if the provided key is on unsupported curve
 */
function tezosAddressFromPublicKey(publicKey) {
    var prefixArray;
    switch (publicKey.curve) {
        case KindSECP256K1:
            prefixArray = prefix.tz2;
            break;
        case KindED25519:
            prefixArray = prefix.tz1;
            break;
        case KindSECP256R1:
            prefixArray = prefix.tz3;
            break;
        default:
            throw new Error(`public key curve not supported`);
    }
    return composeAddress(publicKey.bytes, prefixArray);
}
function checksum(input) {
    const h = sha256(input);
    const h2 = sha256(h);
    return h2.slice(0, 4);
}
function hash(pkBytes) {
    return blake2AsU8a(pkBytes, 160);
}
function composeAddress(key, prefixArray) {
    const h = hash(key);
    const result = new Uint8Array(27);
    result.set(prefixArray, 0);
    result.set(h, 3);
    result.set(checksum(result.slice(0, 23)), 23);
    return result;
}

export { tezosAddressFromPublicKey };
