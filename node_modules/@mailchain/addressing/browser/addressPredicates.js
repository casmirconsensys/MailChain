import { isAnyHex } from '@mailchain/encoding';
import { isBase58 } from '@polkadot/util-crypto';
import { parseWalletAddress } from './parseWalletAddress.js';
import { Prefix } from './protocols/tezos/const.js';
import { ETHEREUM, NEAR } from './protocols/consts.js';

function isMailchainAccountAddress(address) {
    const isMailchainUsername = address.username.match(/(^[a-zA-Z0-9][_\-a-zA-Z0-9]{0,18}[a-zA-Z0-9])$/) != null;
    const isJustMailchainDomain = address.domain.match(/^mailchain\.[a-z]+$/) != null;
    return isMailchainUsername && isJustMailchainDomain;
}
function isEthereumAddress(address) {
    const props = parseWalletAddress(address);
    if ((props === null || props === void 0 ? void 0 : props.protocol) !== ETHEREUM)
        return false;
    return address.username.length === 42 && address.username.startsWith('0x') && isAnyHex(address.username);
}
function isNearImplicitAccount(address) {
    const props = parseWalletAddress(address);
    if ((props === null || props === void 0 ? void 0 : props.protocol) !== NEAR)
        return false;
    return (address.username.length === 64 &&
        address.username.match(/^(([a-z\d]+[\-_])*[a-z\d]+\.)*([a-z\d]+[\-_])*[a-z\d]+$/) != null);
}
function isTezosAddress(address) {
    return (address.username.length === 36 &&
        [Prefix.TZ1, Prefix.TZ2, Prefix.TZ3].includes(address.username.slice(0, 3)) &&
        isBase58(address.username.slice(3)));
}

export { isEthereumAddress, isMailchainAccountAddress, isNearImplicitAccount, isTezosAddress };
