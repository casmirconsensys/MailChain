'use strict';

var encoding = require('@mailchain/encoding');
var utilCrypto = require('@polkadot/util-crypto');
var parseWalletAddress = require('./parseWalletAddress.js');
var _const = require('./protocols/tezos/const.js');
var consts = require('./protocols/consts.js');

function isMailchainAccountAddress(address) {
    const isMailchainUsername = address.username.match(/(^[a-zA-Z0-9][_\-a-zA-Z0-9]{0,18}[a-zA-Z0-9])$/) != null;
    const isJustMailchainDomain = address.domain.match(/^mailchain\.[a-z]+$/) != null;
    return isMailchainUsername && isJustMailchainDomain;
}
function isEthereumAddress(address) {
    const props = parseWalletAddress.parseWalletAddress(address);
    if ((props === null || props === void 0 ? void 0 : props.protocol) !== consts.ETHEREUM)
        return false;
    return address.username.length === 42 && address.username.startsWith('0x') && encoding.isAnyHex(address.username);
}
function isNearImplicitAccount(address) {
    const props = parseWalletAddress.parseWalletAddress(address);
    if ((props === null || props === void 0 ? void 0 : props.protocol) !== consts.NEAR)
        return false;
    return (address.username.length === 64 &&
        address.username.match(/^(([a-z\d]+[\-_])*[a-z\d]+\.)*([a-z\d]+[\-_])*[a-z\d]+$/) != null);
}
function isTezosAddress(address) {
    return (address.username.length === 36 &&
        [_const.Prefix.TZ1, _const.Prefix.TZ2, _const.Prefix.TZ3].includes(address.username.slice(0, 3)) &&
        utilCrypto.isBase58(address.username.slice(3)));
}

exports.isEthereumAddress = isEthereumAddress;
exports.isMailchainAccountAddress = isMailchainAccountAddress;
exports.isNearImplicitAccount = isNearImplicitAccount;
exports.isTezosAddress = isTezosAddress;
